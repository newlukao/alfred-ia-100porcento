
import { database } from './database';

// Fun√ß√£o para obter data no fuso hor√°rio UTC-3 (Brasil)
function getBrazilDate(): Date {
  const now = new Date();
  const utc = now.getTime() + (now.getTimezoneOffset() * 60000);
  const brazilTime = new Date(utc + (-3 * 3600000)); // UTC-3
  return brazilTime;
}

// Fun√ß√£o para formatar data brasileira
function formatBrazilDate(date: Date): string {
  return date.toLocaleDateString('pt-BR', { 
    day: '2-digit', 
    month: '2-digit', 
    year: 'numeric' 
  });
}

interface ChatMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

interface ExpenseExtraction {
  valor: number;
  categoria: string;
  descricao: string;
  data: string;
  isValid: boolean;
}

export class OpenAIService {
  private apiKey: string;
  private baseURL = 'https://api.openai.com/v1/chat/completions';

  constructor(apiKey: string) {
    this.apiKey = apiKey;
  }

  async chatCompletion(messages: ChatMessage[], model: string = 'gpt-4o-mini'): Promise<string> {
    try {
      const response = await fetch(this.baseURL, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model,
          messages,
          temperature: 0.7,
          max_tokens: 400,
        }),
      });

      if (!response.ok) {
        throw new Error(`OpenAI API error: ${response.status}`);
      }

      const data = await response.json();
      return data.choices[0]?.message?.content || '';
    } catch (error) {
      console.error('Error calling OpenAI API:', error);
      throw error;
    }
  }

  async extractExpenseData(
    userMessage: string, 
    systemInstructions: string, 
    conversationHistory: any[] = [],
    userPersonality?: string,
    userId?: string
  ): Promise<{
    response: string;
    extraction: ExpenseExtraction;
    personalityUpdate?: string;
  }> {
    
    const personalityContext = userPersonality ? `
PERFIL DO USU√ÅRIO (aprenda e se adapte):
${userPersonality}

Com base no perfil, adapte seu jeito de falar para ficar mais pr√≥ximo do usu√°rio.
` : '';

    const extractionPrompt = `Voc√™ √© um assistente financeiro brasileiro SUPER INTELIGENTE! Use g√≠rias, seja natural e conecte TODAS as informa√ß√µes da conversa.

${personalityContext}

PERSONALIDADE MELHORADA:
- Fale como um brasileiro jovem e descontra√≠do
- Use g√≠rias tipo: "massa", "show", "beleza", "top", "valeu", "rolou", "maneiro", "demais", "dahora"
- Seja empolgado quando registrar gastos: "Opa!", "Show!", "Fechou!", "Mandou bem!"
- Use emojis com modera√ß√£o
- Seja EXTREMAMENTE INTELIGENTE e conecte informa√ß√µes entre mensagens
- SEMPRE LEMBRE valores mencionados anteriormente
- ENTENDA confirma√ß√µes: "sim", "ta sim", "certo", "isso mesmo", "exato", "correto"

SUPER INTELIG√äNCIA - CONTEXTO DA CONVERSA:
${conversationHistory.map((msg, index) => `${index + 1}. ${msg.type}: "${msg.content}"`).join('\n')}

L√ìGICA DE CONFIRMA√á√ÉO:
- Se a √∫ltima mensagem do bot perguntou "T√° certo?" e o usu√°rio responde "sim", "ta sim", "certo", "isso", "exato" ‚Üí REGISTRE o gasto e confirme com anima√ß√£o
- Se detectar confirma√ß√£o, use extraction da mensagem anterior do bot e marque isValid: true

REGRAS DE CONEX√ÉO CONTEXTUAL (MUITO IMPORTANTE):
1. üß† ANALISE TODA A CONVERSA - n√£o s√≥ a mensagem atual
2. üîó Se usu√°rio disse "gastei X" em qualquer mensagem anterior e agora menciona um produto/categoria, CONECTE!
3. ‚úÖ PRIMEIRA VEZ: Pergunte "T√° certo?" para confirmar
4. ‚úÖ CONFIRMA√á√ÉO: Se usu√°rio confirmar, registre e celebre: "Show! R$ X em Y registrado! üéâ"
5. üéØ Se encontrar VALOR + CATEGORIA (mesmo em mensagens separadas), pergunte confirma√ß√£o primeiro
6. ü§î Se n√£o conseguir conectar, pergunte de forma espec√≠fica

DETEC√á√ÉO DE CONFIRMA√á√ïES:
- Positivas: sim, ta sim, certo, isso mesmo, exato, correto, confirmo, pode ser, t√° certo, √© isso, isso a√≠
- Negativas: n√£o, nao, errado, n√£o √© isso, t√° errado

DETEC√á√ÉO INTELIGENTE DE CATEGORIAS (com sin√¥nimos e abrevia√ß√µes):
- alimenta√ß√£o: comida, almo√ßo, jantar, lanche, restaurante, pizza, hamb√∫rguer, hamburg, hamb, burger, burguer, habburg, churros, churro, mc, mcdonalds, bk, kfc, subway, ifood, delivery, caf√©, bar, bebida, picanha, carne, frango, peixe, feira, a√ßougue, padaria, sandu√≠che, sanduiche, food, fastfood, churrasco, churrascaria, alimentos, comer, eating, bebidas, suco, refrigerante, cerveja, vinho, √°gua, leite, caf√©, cappuccino
- vestu√°rio: roupa, roupas, camisa, cal√ßa, sapato, t√™nis, blusa, vestido, shorts, jaqueta, casaco, moda, camiseta, polo, social, bermuda, shopping, loja, lojas, magazine, renner, c&a, zara, riachuelo, bolsa, bolsas, sapatos, sneaker, chinelo, sand√°lia, bon√©, √≥culos, rel√≥gio
- transporte: uber, taxi, gasolina, combust√≠vel, posto, √¥nibus, metr√¥, trem, passagem, viagem, carro, moto, 99, cabify, aplicativo, transporte, deslocamento, ida, volta, corrida, carona
- mercado: supermercado, compras, mantimentos, feira, mercadinho, atacad√£o, assa√≠, carrefour, extra, p√£o de a√ß√∫car, walmart, compra, comprar, shopping, hipermercado
- lazer: cinema, festa, show, teatro, jogo, parque, balada, rol√™, divers√£o, netflix, streaming, spotify, ingresso, entretenimento, passeio, viagem, turismo, clube, academia
- sa√∫de: rem√©dio, m√©dico, farm√°cia, hospital, dentista, consulta, exame, tratamento, medicamento, drogaria, cl√≠nica, laborat√≥rio, check-up, fisioterapia
- casa: m√≥vel, sof√°, mesa, decora√ß√£o, limpeza, reforma, casa, lar, m√≥veis, eletrodom√©sticos, geladeira, fog√£o, microondas, tv, televis√£o, cama, colch√£o
- contas: luz, √°gua, internet, telefone, energia, g√°s, conta, fatura, boleto, presta√ß√£o, financiamento, cart√£o, taxa, iptu, ipva, seguro

N√öMEROS POR EXTENSO E VARIA√á√ïES:
- dez = 10, vinte = 20, trinta = 30, quarenta = 40, cinquenta = 50
- sessenta = 60, setenta = 70, oitenta = 80, noventa = 90, cem = 100
- duzentos = 200, trezentos = 300, quatrocentos = 400, quinhentos = 500
- mil = 1000, "um mil" = 1000, "dois mil" = 2000

FORMATO OBRIGAT√ìRIO (JSON):
{
  "response": "resposta_humanizada_com_confirmacao_ou_celebracao",
  "extraction": {
    "valor": numero_ou_0,
    "categoria": "categoria_ou_vazio",
    "descricao": "descri√ß√£o_natural_do_gasto",
    "data": "YYYY-MM-DD",
    "isValid": true_se_valor_E_categoria_identificados_E_confirmados
  },
  "personalityUpdate": "observacoes_sobre_o_jeito_do_usuario_falar"
}

EXEMPLOS DE FLUXO COMPLETO:
Usu√°rio: "gastei 200"
Bot: "Opa, R$ 200 anotado! Em que categoria?"
Usu√°rio: "hamb√∫rguer"  
Bot: "Show! R$ 200 no hamb√∫rguer! T√° certo?" (isValid: false - aguardando confirma√ß√£o)
Usu√°rio: "ta sim"
Bot: "Massa! R$ 200 em alimenta√ß√£o registrado! üéâ" (isValid: true - confirma e registra)

IMPORTANTE: 
- SEMPRE confirme antes de registrar gastos
- ENTENDA confirma√ß√µes do usu√°rio
- Celebre quando confirmado e registrado
- JSON v√°lido SEMPRE`;

    try {
      const messages: ChatMessage[] = [
        { role: 'system', content: extractionPrompt },
        { role: 'user', content: userMessage }
      ];

      const result = await this.chatCompletion(messages);
      console.log('OpenAI raw response:', result);
      
      // SISTEMA DE CONFIRMA√á√ÉO (PRIORITY #1)
      const currentMessage = userMessage.toLowerCase();
      const confirmationWords = ['sim', 'ta sim', 't√° sim', 'certo', 'isso mesmo', 'exato', 'correto', 'confirmo', 'pode ser', 't√° certo', '√© isso', 'isso a√≠', 'ta certo'];
      const isConfirmation = confirmationWords.some(word => currentMessage.includes(word));
      
      console.log(`‚ùì Verificando confirma√ß√£o para: "${userMessage}"`);
      console.log(`‚úÖ √â confirma√ß√£o? ${isConfirmation}`);
      
      if (isConfirmation) {
        // Buscar a √∫ltima mensagem do bot que pediu confirma√ß√£o
        const botMessages = conversationHistory.filter(msg => msg.type === 'assistant');
        const lastBotMessage = botMessages[botMessages.length - 1];
        
        console.log(`ü§ñ √öltima mensagem do bot: "${lastBotMessage?.content}"`);
        
        if (lastBotMessage && lastBotMessage.content.includes('T√° certo?')) {
          // Extrair valor e categoria da mensagem do bot
          const valorMatch = lastBotMessage.content.match(/R\$\s*(\d+(?:[.,]\d+)?)/);
          const categoriaMatch = lastBotMessage.content.match(/em\s+(\w+)/i);
          
          console.log(`üí∞ Valor extra√≠do: ${valorMatch?.[1]}`);
          console.log(`üè∑Ô∏è Categoria extra√≠da: ${categoriaMatch?.[1]}`);
          
          if (valorMatch && categoriaMatch) {
            const valor = parseFloat(valorMatch[1].replace(',', '.'));
            let categoria = categoriaMatch[1].toLowerCase();
            
            // Mapear categorias corretamente
            console.log(`üîß Categoria original detectada: "${categoria}"`);
            
            // Validar se √© uma categoria v√°lida ou mapear para a correta
            const validCategories = ['tecnologia', 'alimenta√ß√£o', 'vestu√°rio', 'transporte', 'mercado', 'lazer', 'sa√∫de', 'casa', 'contas', 'educa√ß√£o', 'beleza', 'pets'];
            
            if (!validCategories.includes(categoria)) {
              // Mapear para categoria correta
              if (categoria.includes('aliment') || categoria.includes('hamburg') || categoria.includes('comida')) {
                categoria = 'alimenta√ß√£o';
              } else if (categoria.includes('tecnolog') || categoria.includes('computador')) {
                categoria = 'tecnologia';
              } else if (categoria.includes('pet') || categoria.includes('veterinar')) {
                categoria = 'pets';
              } else {
                categoria = 'outros';
              }
            }
            
            console.log(`üéâ CONFIRMA√á√ÉO PROCESSADA: R$ ${valor} em ${categoria}`);
            
            // NOVO FLUXO: Perguntar sobre a data
            const hoje = formatBrazilDate(getBrazilDate());
            
            return {
              response: `Show! R$ ${valor.toFixed(2)} em ${categoria} confirmado! üëç\n\nüìÖ Esse gasto foi hoje (${hoje})?\n\nResponde "sim" se foi hoje ou "n√£o" se foi outro dia!`,
              extraction: {
                valor: valor,
                categoria: categoria,
                descricao: `Aguardando confirma√ß√£o de data`,
                data: '', // Vazio at√© confirmar data
                isValid: false // Ainda n√£o finalizado
              }
            };
          }
        }
        
        // NOVO: Detectar negativa para data "hoje" - quando n√£o foi hoje
        if (lastBotMessage && lastBotMessage.content.includes('foi hoje') && currentMessage.includes('n√£o')) {
          // Buscar dados do gasto pendente na mensagem do bot
          const valorMatch = lastBotMessage.content.match(/R\$\s*(\d+(?:[.,]\d+)?)/);
          const categoriaMatch = lastBotMessage.content.match(/em\s+(\w+)/i);
          
          if (valorMatch && categoriaMatch) {
            const valor = parseFloat(valorMatch[1].replace(',', '.'));
            const categoria = categoriaMatch[1].toLowerCase();
            
            return {
              response: `Beleza! Ent√£o quando foi esse gasto de R$ ${valor.toFixed(2)} em ${categoria}? üìÖ\n\nMe fala a data: "foi ontem", "foi dia 15/12" ou "foi segunda-feira"!`,
              extraction: {
                valor: valor,
                categoria: categoria,
                descricao: `Aguardando data espec√≠fica`,
                data: '', // Vazio at√© confirmar data
                isValid: false
              }
            };
          }
        }
        
        // NOVO: Detectar entrada de data espec√≠fica
        if (lastBotMessage && lastBotMessage.content.includes('quando foi esse gasto')) {
          const valorMatch = lastBotMessage.content.match(/R\$\s*(\d+(?:[.,]\d+)?)/);
          const categoriaMatch = lastBotMessage.content.match(/em\s+(\w+)/i);
          
          if (valorMatch && categoriaMatch) {
            const valor = parseFloat(valorMatch[1].replace(',', '.'));
            const categoria = categoriaMatch[1].toLowerCase();
            
            // Tentar interpretar a data informada
            let dataInterpretada = '';
            let dataFormatada = '';
            
            if (currentMessage.includes('ontem')) {
              const ontem = getBrazilDate();
              ontem.setDate(ontem.getDate() - 1);
              dataInterpretada = ontem.toISOString().split('T')[0];
              dataFormatada = formatBrazilDate(ontem);
            } else if (currentMessage.includes('anteontem')) {
              const anteontem = getBrazilDate();
              anteontem.setDate(anteontem.getDate() - 2);
              dataInterpretada = anteontem.toISOString().split('T')[0];
              dataFormatada = formatBrazilDate(anteontem);
            } else {
              // Tentar extrair data no formato DD/MM ou DD/MM/YYYY
              const dateMatch = currentMessage.match(/(\d{1,2})\/(\d{1,2})(?:\/(\d{2,4}))?/);
              if (dateMatch) {
                const dia = parseInt(dateMatch[1]);
                const mes = parseInt(dateMatch[2]) - 1; // M√™s base 0
                const ano = dateMatch[3] ? (dateMatch[3].length === 2 ? 2000 + parseInt(dateMatch[3]) : parseInt(dateMatch[3])) : getBrazilDate().getFullYear();
                
                const dataParsed = new Date(ano, mes, dia);
                dataInterpretada = dataParsed.toISOString().split('T')[0];
                dataFormatada = formatBrazilDate(dataParsed);
              } else {
                // Se n√£o conseguiu interpretar, pedir novamente
                return {
                  response: `Hmm, n√£o consegui entender essa data... ü§î\n\nPode tentar de novo? Exemplos:\n‚Ä¢ "ontem"\n‚Ä¢ "dia 15/12"\n‚Ä¢ "15/12/2024"\n‚Ä¢ "anteontem"`,
                  extraction: {
                    valor: 0,
                    categoria: '',
                    descricao: 'Data n√£o compreendida',
                    data: '',
                    isValid: false
                  }
                };
              }
            }
            
            if (dataInterpretada) {
              return {
                response: `Perfeito! Ent√£o foi dia ${dataFormatada}? üìÖ\n\nR$ ${valor.toFixed(2)} em ${categoria} no dia ${dataFormatada}.\n\nResponde "sim" pra confirmar ou "n√£o" se a data t√° errada!`,
                extraction: {
                  valor: valor,
                  categoria: categoria,
                  descricao: `Confirmando data: ${dataFormatada}`,
                  data: dataInterpretada,
                  isValid: false // Aguardando confirma√ß√£o final
                }
              };
            }
          }
        }
        
        // NOVO: Confirma√ß√£o final da data espec√≠fica
        if (lastBotMessage && lastBotMessage.content.includes('Ent√£o foi dia') && lastBotMessage.content.includes('pra confirmar')) {
          const valorMatch = lastBotMessage.content.match(/R\$\s*(\d+(?:[.,]\d+)?)/);
          const categoriaMatch = lastBotMessage.content.match(/em\s+(\w+)/i);
          const dataMatch = lastBotMessage.content.match(/no dia (.+?)\./);
          
          if (valorMatch && categoriaMatch && dataMatch) {
            const valor = parseFloat(valorMatch[1].replace(',', '.'));
            const categoria = categoriaMatch[1].toLowerCase();
            const dataFormatada = dataMatch[1];
            
            // Converter data formatada de volta para ISO
            const partesData = dataFormatada.split('/');
            const dataFinal = new Date(parseInt(partesData[2]), parseInt(partesData[1]) - 1, parseInt(partesData[0]));
            const dataISO = dataFinal.toISOString().split('T')[0];
            
            return {
              response: `Show demais! R$ ${valor.toFixed(2)} em ${categoria} do dia ${dataFormatada} registrado! üéâ\n\nGasto salvo com sucesso!\n\nE a√≠, rolou mais algum gasto que voc√™ quer anotar? üòä`,
              extraction: {
                valor: valor,
                categoria: categoria,
                descricao: `Gasto em ${categoria}`,
                data: dataISO,
                isValid: true // FINALIZA COM DATA CORRETA!
              }
            };
          }
        }
        
        // NOVO: Detectar confirma√ß√£o de data "hoje"
        if (lastBotMessage && lastBotMessage.content.includes('foi hoje')) {
          // Buscar dados do gasto pendente na mensagem do bot
          const valorMatch = lastBotMessage.content.match(/R\$\s*(\d+(?:[.,]\d+)?)/);
          const categoriaMatch = lastBotMessage.content.match(/em\s+(\w+)/i);
          
          if (valorMatch && categoriaMatch) {
            const valor = parseFloat(valorMatch[1].replace(',', '.'));
            const categoria = categoriaMatch[1].toLowerCase();
            const dataHoje = getBrazilDate().toISOString().split('T')[0];
            
            return {
              response: `Perfeito! R$ ${valor.toFixed(2)} em ${categoria} de hoje registrado! üéâ\n\nE a√≠, rolou mais algum gasto que voc√™ quer anotar? üòä`,
              extraction: {
                valor: valor,
                categoria: categoria,
                descricao: `Gasto em ${categoria}`,
                data: dataHoje,
                isValid: true // FINALIZA!
              }
            };
          }
        }
      }
      
      // DETEC√á√ÉO DE RESPOSTAS NEGATIVAS (n√£o tem mais gastos)
      const negativeWords = ['n√£o', 'nada', 'sem mais', 'rolou n√£o', 'n√£o rolou', 'por hoje n√£o', 'hoje n√£o', 'acabou', 's√≥ isso', 'nenhum'];
      const isNegative = negativeWords.some(word => currentMessage.includes(word)) && !currentMessage.includes('√∫ltima') && !currentMessage.includes('gastei') && !conversationHistory.some(msg => msg.content && msg.content.includes('foi hoje'));
      
      console.log(`‚ùå Verificando negativa para: "${userMessage}"`);
      console.log(`‚ùå √â negativa? ${isNegative}`);
      
      if (isNegative) {
        // Verificar se a pergunta anterior foi sobre mais gastos
        const botMessages = conversationHistory.filter(msg => msg.type === 'assistant');
        const lastBotMessage = botMessages[botMessages.length - 1];
        
        if (lastBotMessage && lastBotMessage.content.includes('mais algum gasto')) {
          return {
            response: 'Show! Qualquer coisa, se aparecer mais algum gasto, √© s√≥ me chamar! T√¥ sempre aqui pra te ajudar! üòä‚úåÔ∏è',
            extraction: {
              valor: 0,
              categoria: '',
              descricao: '',
              data: new Date().toISOString().split('T')[0],
              isValid: false
            }
          };
        }
      }
      
      // DETEC√á√ÉO DE SAUDA√á√ïES E CUMPRIMENTOS
      const greetingWords = ['ola', 'ol√°', 'oi', 'eai', 'e ai', 'bom dia', 'boa tarde', 'boa noite', 'hey', 'hello', 'salve', 'fala'];
      const isGreeting = greetingWords.some(word => currentMessage.includes(word));
      
      console.log(`üëã Verificando sauda√ß√£o para: "${userMessage}"`);
      console.log(`üëã √â sauda√ß√£o? ${isGreeting}`);
      
      if (isGreeting) {
        const greetingResponses = [
          'E a√≠! Beleza? üòÑ Pronto pra anotar uns gastos? Manda a√≠: "gastei R$ 50 no mercado" ou algo assim! üí∞',
          'Opa! Tudo j√≥ia? üòä Vamos registrar seus gastos? √â s√≥ falar: "gastei R$ 30 no lanche" que eu anoto tudo! üçîüí∏',
          'Salve! Show de bola! ü§ô Bora organizar as finan√ßas? Fala a√≠ qualquer gasto: "gastei R$ 100 na roupa"! üëï',
          'E a√≠, tranquilo? üòé T√¥ aqui pra te ajudar com os gastos! Manda qualquer coisa tipo: "gastei R$ 80 no uber"! üöó',
          'Opa! Beleza demais! üéâ Pronto pra registrar uns gastos maneiros? S√≥ falar: "gastei R$ 25 no a√ßa√≠"! üç®'
        ];
        
        const randomResponse = greetingResponses[Math.floor(Math.random() * greetingResponses.length)];
        
        return {
          response: randomResponse,
          extraction: {
            valor: 0,
            categoria: '',
            descricao: '',
            data: new Date().toISOString().split('T')[0],
            isValid: false
          }
        };
      }
      
      // DETEC√á√ÉO DE CONFIRMA√á√ïES CONVERSACIONAIS (respostas positivas ap√≥s sauda√ß√£o)
      const conversationalWords = ['vamos', 'bora', 'ok', 'beleza', 'sim', 'claro', 'dale', 'show', 'massa', 'vamo', 'bora l√°', 'pode ser', 'tranquilo', 'fechou'];
      const isConversational = conversationalWords.some(word => currentMessage.includes(word));
      
      console.log(`üí¨ Verificando resposta conversacional para: "${userMessage}"`);
      console.log(`üí¨ √â conversacional? ${isConversational}`);
      
      if (isConversational) {
        // Verificar se a mensagem anterior do bot foi uma sauda√ß√£o OU pergunta sobre mais gastos
        const botMessages = conversationHistory.filter(msg => msg.type === 'assistant');
        const lastBotMessage = botMessages[botMessages.length - 1];
        
        console.log(`ü§ñ √öltima mensagem do bot para conversacional: "${lastBotMessage?.content}"`);
        
        // Check if bot was asking about expenses, greeting, or asking for more expenses
        if (lastBotMessage && (
          lastBotMessage.content.includes('Pronto pra anotar') || 
          lastBotMessage.content.includes('Vamos registrar') ||
          lastBotMessage.content.includes('mais algum gasto') ||
          lastBotMessage.content.includes('organizar as finan√ßas') ||
          lastBotMessage.content.includes('anotar uns gastos') ||
          lastBotMessage.content.includes('Bora organizar') ||
          lastBotMessage.content.includes('Show de bola') ||
          lastBotMessage.content.includes('Fala a√≠ qualquer gasto') ||
          lastBotMessage.content.includes('üí∞') // Any message with money emoji is likely asking for expenses
        )) {
          console.log(`‚úÖ CONVERSACIONAL DETECTADO - retornando resposta apropriada`);
          
          const readyResponses = [
            'Beleza! T√¥ aqui pra ajudar a organizar suas finan√ßas! Fala a√≠, j√° teve algum gasto que voc√™ quer anotar? Pode ser qualquer coisa, tipo "gastei R$ 100 na internet" ou "gastei R$ 50 no cinema"! üéâ',
            'Show! üéâ Ent√£o me fala a√≠, qual foi o √∫ltimo gasto que voc√™ fez? Pode ser qualquer coisa: comida, roupa, transporte... üí∞',
            'Massa! üòä Vamos l√° ent√£o! Me conta, gastou com o qu√™ hoje? Almo√ßo? Uber? Compras? üõí',
            'Dahora! üöÄ Bora anotar! Qual foi a √∫ltima vez que voc√™ abriu a carteira? Me fala a√≠! üí≥',
            'Top! üî• Perfeito! Ent√£o me conta: qual foi o gasto mais recente? Pode ser desde um caf√© at√© uma compra maior! ‚òïüí∏',
            'Beleza! ü§ô Vamos organizar essas finan√ßas! Me fala qualquer gasto que voc√™ lembra... o que rolou? üìä'
          ];
          
          const randomResponse = readyResponses[Math.floor(Math.random() * readyResponses.length)];
          
          return {
            response: randomResponse,
            extraction: {
              valor: 0,
              categoria: '',
              descricao: '',
              data: new Date().toISOString().split('T')[0],
              isValid: false
            }
          };
        } else {
          console.log(`‚ùå CONVERSACIONAL n√£o correspondeu ao contexto esperado`);
        }
      }
      
      // DETEC√á√ÉO DE CONVERSAS VAGAS (quando n√£o entende o contexto)
      const vagueWords = ['sim', 'n√£o', 'ok', 'certo', 'talvez', 'pode ser'];
      const isVague = vagueWords.some(word => currentMessage === word.toLowerCase()) && !isConfirmation;
      
      if (isVague) {
        const helpResponses = [
          'Hmm, n√£o entendi muito bem... ü§î Voc√™ quer anotar algum gasto? Me fala tipo: "gastei R$ 30 no almo√ßo"! üçΩÔ∏è',
          'Opa, ficou meio vago a√≠! üòÖ T√° querendo registrar alguma despesa? Fala a√≠: "comprei uma camisa por R$ 80"! üëï',
          'N√£o t√¥ sacando... üßê Bora ser mais espec√≠fico? Me conta algum gasto: "paguei R$ 15 no uber"! üöó',
          'Meio confuso aqui! üòµ Voc√™ gastou alguma coisa que quer anotar? Tipo: "gastei R$ 50 no mercado"! üõí'
        ];
        
        const randomResponse = helpResponses[Math.floor(Math.random() * helpResponses.length)];
        
        return {
          response: randomResponse,
          extraction: {
            valor: 0,
            categoria: '',
            descricao: '',
            data: new Date().toISOString().split('T')[0],
            isValid: false
          }
        };
      }
      
      // DETEC√á√ÉO DE CONSULTAS DE RELAT√ìRIO/HIST√ìRICO (PRIORITY #2)
      const reportWords = ['quanto gastei', 'gastos', 'total', 'semana', 'm√™s', 'mes', 'hoje', 'ontem', 'relat√≥rio', 'relatrio', 'hist√≥rico', 'historico', 'resumo', 'balan√ßo', 'balanco', '√∫ltima semana', 'ultimo mes', 'gasto total', 'quanto foi'];
      const isReportQuery = reportWords.some(word => currentMessage.includes(word));
      
      console.log(`üìä Verificando consulta de relat√≥rio para: "${userMessage}"`);
      console.log(`üìä √â consulta de relat√≥rio? ${isReportQuery}`);
      
      if (isReportQuery && userId) {
        console.log(`üìä Executando consulta de relat√≥rio para usu√°rio: ${userId}`);
        
        try {
          // Buscar todos os gastos do usu√°rio
          const userExpenses = await database.getExpensesByUser(userId);
          console.log(`üìã Total de gastos encontrados: ${userExpenses.length}`);
          
          // Detectar per√≠odo solicitado
          let periodo = 'total';
          let startDate = new Date('2000-01-01'); // Data muito antiga para incluir tudo
          let endDate = new Date();
          
          if (currentMessage.includes('semana') || currentMessage.includes('√∫ltima semana')) {
            periodo = '√∫ltima semana';
            startDate = new Date();
            startDate.setDate(startDate.getDate() - 7);
          } else if (currentMessage.includes('m√™s') || currentMessage.includes('mes') || currentMessage.includes('√∫ltimo m√™s')) {
            periodo = '√∫ltimo m√™s';
            startDate = new Date();
            startDate.setMonth(startDate.getMonth() - 1);
          } else if (currentMessage.includes('hoje')) {
            periodo = 'hoje';
            startDate = new Date();
            startDate.setHours(0, 0, 0, 0);
            endDate = new Date();
            endDate.setHours(23, 59, 59, 999);
          } else if (currentMessage.includes('ontem')) {
            periodo = 'ontem';
            startDate = new Date();
            startDate.setDate(startDate.getDate() - 1);
            startDate.setHours(0, 0, 0, 0);
            endDate = new Date();
            endDate.setDate(endDate.getDate() - 1);
            endDate.setHours(23, 59, 59, 999);
          }
          
          // Filtrar gastos por per√≠odo
          const filteredExpenses = userExpenses.filter(expense => {
            const expenseDate = new Date(expense.data);
            return expenseDate >= startDate && expenseDate <= endDate;
          });
          
          console.log(`üìÖ Per√≠odo: ${periodo}`);
          console.log(`üìÖ Data in√≠cio: ${startDate.toISOString()}`);
          console.log(`üìÖ Data fim: ${endDate.toISOString()}`);
          console.log(`üìÖ Gastos filtrados para ${periodo}: ${filteredExpenses.length}`);
          console.log(`üìã Todos os gastos do usu√°rio:`, userExpenses.map(e => ({ data: e.data, valor: e.valor, categoria: e.categoria })));
          console.log(`üìã Gastos filtrados:`, filteredExpenses.map(e => ({ data: e.data, valor: e.valor, categoria: e.categoria })));
          
          if (filteredExpenses.length === 0) {
            const motivadores = ['Beleza!', 'Tranquilo!', 'Show!', 'Massa!'];
            const motivador = motivadores[Math.floor(Math.random() * motivadores.length)];
            
            return {
              response: `${motivador} N√£o achei gastos ${periodo === 'total' ? 'registrados ainda' : `da ${periodo}`}! ü§∑‚Äç‚ôÇÔ∏è\n\nüí° Bora come√ßar? Fala a√≠ qualquer gasto: "gastei R$ 50 no almo√ßo" ou "paguei R$ 30 no uber"!\n\n‚ú® Quanto mais voc√™ registrar, melhor vou te ajudar a controlar as finan√ßas! üòä`,
              extraction: {
                valor: 0,
                categoria: '',
                descricao: `Consulta sem gastos: ${periodo}`,
                data: new Date().toISOString().split('T')[0],
                isValid: false
              }
            };
          }
          
          // Calcular total geral
          const totalGeral = filteredExpenses.reduce((sum, expense) => sum + expense.valor, 0);
          
          // Agrupar por categoria
          const porCategoria: { [key: string]: number } = {};
          filteredExpenses.forEach(expense => {
            porCategoria[expense.categoria] = (porCategoria[expense.categoria] || 0) + expense.valor;
          });
          
          // Ordenar categorias por valor (maior primeiro)
          const categoriasOrdenadas = Object.entries(porCategoria)
            .sort(([,a], [,b]) => b - a)
            .slice(0, 5); // Top 5 categorias
          
          // Emojis para categorias
          const categoryEmojis: {[key: string]: string} = {
            'alimenta√ß√£o': 'üçΩÔ∏è',
            'vestu√°rio': 'üëï',
            'transporte': 'üöó',
            'tecnologia': 'üíª',
            'mercado': 'üõí',
            'lazer': 'üéâ',
            'sa√∫de': 'üè•',
            'casa': 'üè†',
            'contas': 'üí°',
            'educa√ß√£o': 'üìö',
            'beleza': 'üíÖ',
            'pets': 'üêï',
            'outros': 'üí∞'
          };
          
          // Montar resposta com visual bonito e organizado
          const saudacoes = ['Show de bola!', 'Massa!', 'Mandou bem!', 'Top demais!', 'Dahora!'];
          const saudacao = saudacoes[Math.floor(Math.random() * saudacoes.length)];
          
          let resposta = `${saudacao} Aqui est√° o que voc√™ gastou ${periodo === '√∫ltima semana' ? 'na √∫ltima semana' : periodo === '√∫ltimo m√™s' ? 'no √∫ltimo m√™s' : periodo === 'hoje' ? 'hoje' : periodo === 'ontem' ? 'ontem' : 'no total'}!\n\n`;
          
          resposta += `üí∞ TOTAL GASTO: R$ ${totalGeral.toFixed(2)}\n`;
          resposta += `üìã TRANSA√á√ïES: ${filteredExpenses.length} gastos registrados\n\n`;
          
          if (categoriasOrdenadas.length > 0) {
            resposta += `üéØ RANKING POR CATEGORIA:\n`;
            categoriasOrdenadas.forEach(([categoria, valor], index) => {
              const emoji = categoryEmojis[categoria] || 'üí∞';
              const percentual = ((valor / totalGeral) * 100).toFixed(1);
              const posicao = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}¬∫`;
              resposta += `${posicao} ${emoji} ${categoria.toUpperCase()} - R$ ${valor.toFixed(2)} ‚Ä¢ ${percentual}%\n`;
            });
            resposta += `\n`;
          }
          
          // Adicionar coment√°rios personalizados baseados nos gastos
          resposta += `üí≠ AN√ÅLISE: `;
          if (totalGeral > 1000) {
            resposta += `Eita! Gastou uma grana boa a√≠! Mas tranquilo, o importante √© ter controle! üòé\n\n`;
          } else if (totalGeral > 500) {
            resposta += `Beleza! Gastos na medida, t√° controlando direitinho! üòä\n\n`;
          } else if (totalGeral > 100) {
            resposta += `Show! Gastinhos bem controlados, parab√©ns! üéâ\n\n`;
          } else {
            resposta += `Top! Super econ√¥mico, mandou muito bem! üí™\n\n`;
          }
          
          resposta += `üöÄ DICA: No Dashboard tem gr√°ficos maneiros pra ver tudo detalhado!`;
          
          return {
            response: resposta,
            extraction: {
              valor: totalGeral,
              categoria: '',
              descricao: `Relat√≥rio ${periodo}: R$ ${totalGeral.toFixed(2)}`,
              data: new Date().toISOString().split('T')[0],
              isValid: false
            }
          };
          
        } catch (error) {
          console.error('Erro ao gerar relat√≥rio:', error);
          return {
            response: `üòÖ Eita! Deu um perrengue aqui ao buscar seus gastos... Tenta de novo em alguns segundos!\n\nüí° Ou vai direto no Dashboard que l√° funciona certinho! üìä`,
            extraction: {
              valor: 0,
              categoria: '',
              descricao: `Erro ao consultar relat√≥rio`,
              data: new Date().toISOString().split('T')[0],
              isValid: false
            }
          };
        }
      } else if (isReportQuery && !userId) {
        return {
          response: `ü§ñ **ERRO T√âCNICO**\n\nDetectei que voc√™ quer ver seus gastos, mas houve um problema de autentica√ß√£o!\n\nüîß **Tente**:\n1. Recarregar a p√°gina\n2. Fazer login novamente\n3. Ou usar o Dashboard no menu`,
          extraction: {
            valor: 0,
            categoria: '',
            descricao: `Consulta sem userId`,
            data: new Date().toISOString().split('T')[0],
            isValid: false
          }
        };
      }
      
      // DETEC√á√ÉO DE INTEN√á√ÉO DE GASTO (antes da an√°lise local)
      const expenseIntentWords = ['gastei', 'gasto', 'comprei', 'paguei', 'saiu', 'foi', 'dinheiro', 'real', 'reais', 'muito', 'abessa', 'bastante', 'hoje', 'ontem'];
      const hasExpenseIntent = expenseIntentWords.some(word => currentMessage.includes(word));
      
      console.log(`üí° Verificando inten√ß√£o de gasto para: "${userMessage}"`);
      console.log(`üí° Tem inten√ß√£o de gasto? ${hasExpenseIntent}`);
      
      if (hasExpenseIntent) {
        // Se detectou inten√ß√£o de gasto mas n√£o tem valor espec√≠fico, perguntar
        const numberMatch = userMessage.match(/\d+(?:[.,]\d+)?/);
        if (!numberMatch) {
          const helpfulResponses = [
            'Opa! Vi que voc√™ gastou! üí∞ Me conta quanto foi? Tipo: "gastei R$ 100" ou "foram R$ 50"!',
            'Show! Rolou um gasto a√≠! üòä Qual foi o valor? Me fala tipo: "saiu R$ 80" ou "gastei R$ 30"!',
            'Beleza! Ent√£o voc√™ gastou hoje! ü§ë Quanto que foi? Pode ser: "paguei R$ 25" ou "foram R$ 60"!',
            'Massa! Vamos anotar esse gasto! üìù Me diz o valor: "gastei R$ 40" ou "saiu R$ 90"!',
            'Top! Vi que rolou uma despesa! üí∏ Qual foi a quantia? Tipo: "gastei R$ 15" ou "paguei R$ 120"!'
          ];
          
          const randomResponse = helpfulResponses[Math.floor(Math.random() * helpfulResponses.length)];
          
          return {
            response: randomResponse,
            extraction: {
              valor: 0,
              categoria: '',
              descricao: '',
              data: new Date().toISOString().split('T')[0],
              isValid: false
            }
          };
        }
      }
      
      // AN√ÅLISE LOCAL INTELIGENTE (BACKUP SYSTEM) - S√ì RODA SE N√ÉO FOR CONFIRMA√á√ÉO, NEGATIVA, SAUDA√á√ÉO OU CONVERSACIONAL
      console.log('üîß INICIANDO AN√ÅLISE LOCAL...');
      console.log('üìù Mensagem do usu√°rio:', userMessage);
      
      let valor = 0;
      let categoria = '';
      
      // Buscar valor na mensagem atual ou hist√≥rico
      const numberMatch = userMessage.match(/\d+(?:[.,]\d+)?/);
      if (numberMatch) {
        valor = parseFloat(numberMatch[0].replace(',', '.'));
        console.log(`üí∞ VALOR ENCONTRADO na mensagem atual: R$ ${valor}`);
        
        // Se encontrou valor na mensagem atual, RESETAR contexto - √© um novo gasto!
        console.log('üîÑ NOVO GASTO DETECTADO - resetando contexto de categoria');
        
      } else {
        // Buscar nas mensagens anteriores SOMENTE se n√£o h√° valor na mensagem atual
        const userMessages = conversationHistory.filter(msg => msg.type === 'user');
        console.log(`üîç Procurando valor em ${userMessages.length} mensagens...`);
        
        for (const msg of userMessages.reverse()) {
          const valueMatch = msg.content.match(/(\d+(?:[.,]\d+)?)/);
          if (valueMatch) {
            valor = parseFloat(valueMatch[1].replace(',', '.'));
            console.log(`üß† VALOR CONECTADO: R$ ${valor} da mensagem: "${msg.content}"`);
            break;
          }
        }
        
        // L√ìGICA ESPECIAL: Se bot perguntou sobre categoria e n√£o h√° valor na mensagem atual
        const botMessages = conversationHistory.filter(msg => msg.type === 'assistant');
        const lastBotMessage = botMessages[botMessages.length - 1];
        
        if (lastBotMessage && lastBotMessage.content.includes('em que categoria rolou esse gasto')) {
          console.log(`üéØ BOT PERGUNTOU CATEGORIA - analisando resposta de categoria`);
          // Usu√°rio est√° respondendo sobre categoria, n√£o precisa de valor na mensagem atual
        }
      }
      
      // Buscar categoria SOMENTE na mensagem atual se h√° valor na mensagem atual
      // OU no hist√≥rico completo se o valor veio do hist√≥rico
      let textToAnalyze = '';
      
      if (numberMatch) {
        // Valor na mensagem atual = analisar APENAS a mensagem atual para categoria
        textToAnalyze = userMessage.toLowerCase();
        console.log(`üè∑Ô∏è Analisando APENAS mensagem atual: "${textToAnalyze}"`);
      } else {
        // Valor do hist√≥rico = pode analisar hist√≥rico completo
        textToAnalyze = (conversationHistory.filter(msg => msg.type === 'user').map(m => m.content).join(' ') + ' ' + userMessage).toLowerCase();
        console.log(`üè∑Ô∏è Analisando hist√≥rico completo: "${textToAnalyze}"`);
      }
      
      const categoryMap = {
        'alimenta√ß√£o': [
          // Comidas espec√≠ficas - incluindo churrasco
          'churrasco', 'churras', 'bbq', 'picanha', 'carne', 'frango', 'porco', 'lingui√ßa', 'costela', 'alcatra',
          'comida', 'almo√ßo', 'jantar', 'lanche', 'caf√©', 'refei√ß√£o', 'pizza', 'hamb√∫rguer', 'hamburg', 'burger', 'churros', 'a√ßa√≠', 'sorvete', 'doce', 'bolo', 'sandu√≠che', 'p√£o', 'biscoito', 'chocolate', 'peixe', 'salada', 'sopa', 'macarr√£o', 'arroz', 'feij√£o', 'batata', 'ovo', 'queijo', 'presunto', 'frutas', 'verduras', 'legumes',
          // Bebidas  
          'bebida', '√°gua', 'refrigerante', 'suco', 'cerveja', 'vinho', 'caipirinha', 'drink', 'whisky', 'vodka', 'energ√©tico', 'isot√¥nico', 'leite', 'caf√©', 'cappuccino', 'expresso',
          // Restaurantes e locais
          'restaurante', 'bar', 'lanchonete', 'padaria', 'a√ßougue', 'pizzaria', 'churrascaria', 'fast-food', 'delivery', 'ifood', 'mcdonalds', 'bk', 'subway', 'kfc', 'dominos', 'outback', 'giraffas'
        ],
        'tecnologia': [
          // Dispositivos
          'computador', 'notebook', 'pc', 'desktop', 'mac', 'macbook', 'celular', 'smartphone', 'iphone', 'samsung', 'motorola', 'lg', 'xiaomi', 'tablet', 'ipad', 'tv', 'televis√£o', 'monitor', 'smartwatch', 'rel√≥gio',
          // Acess√≥rios
          'mouse', 'teclado', 'fone', 'headset', 'carregador', 'cabo', 'adaptador', 'powerbank', 'capinha', 'pel√≠cula', 'suporte',
          // Games e entretenimento
          'playstation', 'xbox', 'nintendo', 'switch', 'ps5', 'ps4', 'jogo', 'game', 'controle', 'headphone',
          // Software e servi√ßos
          'software', 'aplicativo', 'netflix', 'spotify', 'amazon', 'google', 'microsoft', 'adobe', 'steam'
        ],
        'vestu√°rio': [
          // Roupas b√°sicas
          'roupa', 'camisa', 'camiseta', 'polo', 'blusa', 'regata', 'cal√ßa', 'jeans', 'shorts', 'bermuda', 'vestido', 'saia', 'casaco', 'jaqueta', 'blazer', 'su√©ter', 'moletom', 'pijama',
          // Cal√ßados
          'sapato', 't√™nis', 'sand√°lia', 'chinelo', 'bota', 'sapatilha', 'scarpin', 'salto', 'all-star', 'nike', 'adidas', 'havaianas',
          // Acess√≥rios e √≠ntimos
          'meia', 'cueca', 'calcinha', 'suti√£', 'cinto', 'bolsa', 'carteira', 'mochila', '√≥culos', 'rel√≥gio', 'colar', 'pulseira', 'anel', 'brinco', 'chap√©u', 'bon√©', 'len√ßo'
        ],
        'transporte': [
          // Transporte p√∫blico e privado
          'uber', 'taxi', '99', 'cabify', '√¥nibus', 'metr√¥', 'trem', 'avi√£o', 'passagem', 'viagem', 'ped√°gio', 'estacionamento', 'valet',
          // Ve√≠culos
          'carro', 'moto', 'bicicleta', 'bike', 'patinete', 'scooter',
          // Combust√≠vel e manuten√ß√£o
          'gasolina', '√°lcool', 'diesel', 'combust√≠vel', 'posto', 'shell', 'petrobras', 'ipiranga', 'ale', 'conserto', 'manuten√ß√£o', 'mec√¢nico', 'oficina', 'pneu', '√≥leo', 'revis√£o', 'lavagem', 'seguro', 'ipva', 'licenciamento', 'multa'
        ],
        'casa': [
          // M√≥veis
          'm√≥vel', 'sof√°', 'mesa', 'cadeira', 'cama', 'guarda-roupa', 'arm√°rio', 'estante', 'rack', 'c√¥moda', 'poltrona', 'banqueta', 'escrivaninha',
          // Decora√ß√£o
          'decora√ß√£o', 'quadro', 'espelho', 'vaso', 'planta', 'cortina', 'tapete', 'almofada', 'lumin√°ria', 'abajur',
          // Utens√≠lios e eletrodom√©sticos
          'panela', 'frigideira', 'prato', 'copo', 'talheres', 'microondas', 'geladeira', 'fog√£o', 'liquidificador', 'batedeira', 'aspirador', 'ferro', 'ventilador', 'ar-condicionado',
          // Reforma e manuten√ß√£o
          'reforma', 'pintura', 'tinta', 'pedreiro', 'eletricista', 'encanador', 'azulejo', 'piso', 'porta', 'janela', 'fechadura',
          // Limpeza
          'limpeza', 'detergente', 'sab√£o', 'desinfetante', 'vassoura', 'rodo', 'pano', 'esponja', 'produto'
        ],
        'sa√∫de': [
          // Medicamentos
          'rem√©dio', 'medicamento', 'vitamina', 'suplemento', 'antibi√≥tico', 'analg√©sico', 'dipirona', 'paracetamol', 'ibuprofeno',
          // Profissionais
          'm√©dico', 'dentista', 'psic√≥logo', 'fisioterapeuta', 'nutricionista', 'dermatologista', 'cardiologista', 'ginecologista',
          // Locais e procedimentos
          'hospital', 'cl√≠nica', 'farm√°cia', 'drogaria', 'consulta', 'exame', 'raio-x', 'ultrassom', 'cirurgia', 'tratamento', 'terapia', 'vacina', '√≥culos', 'lente'
        ],
        'lazer': [
          // Entretenimento
          'cinema', 'filme', 'teatro', 'show', 'concerto', 'festa', 'balada', 'bar', 'clube', 'parque', 'zool√≥gico', 'aqu√°rio', 'museu',
          // Esportes e atividades
          'academia', 'nata√ß√£o', 'futebol', 't√™nis', 'golf', 'surf', 'skate', 'bike', 'corrida', 'caminhada', 'yoga', 'pilates',
          // Hobbies
          'livro', 'revista', 'jornal', 'jogo', 'quebra-cabe√ßa', 'pintura', 'desenho', 'artesanato', 'm√∫sica', 'instrumento',
          // Viagens
          'viagem', 'hotel', 'pousada', 'resort', 'turismo', 'excurs√£o', 'cruzeiro'
        ],
        'educa√ß√£o': [
          'curso', 'faculdade', 'universidade', 'escola', 'col√©gio', 'aula', 'professor', 'tutor', 'livro', 'apostila', 'material', 'caderno', 'caneta', 'l√°pis', 'mochila', 'estojo', 'calculadora', 'mensalidade', 'matr√≠cula', 'formatura', 'diploma'
        ],
        'beleza': [
          'sal√£o', 'cabelo', 'corte', 'escova', 'pintura', 'luzes', 'alisamento', 'unha', 'manicure', 'pedicure', 'sobrancelha', 'depila√ß√£o', 'massagem', 'facial', 'limpeza', 'hidrata√ß√£o', 'maquiagem', 'perfume', 'creme', 'shampoo', 'condicionador', 'batom', 'base', 'r√≠mel', 'esmalte'
        ],
        'pets': [
          'veterin√°rio', 'ra√ß√£o', 'petshop', 'vacina', 'consulta', 'banho', 'tosa', 'coleira', 'brinquedo', 'casinha', 'cama', 'comedouro', 'bebedouro', 'rem√©dio', 'cachorro', 'gato', 'p√°ssaro', 'peixe', 'hamster'
        ],
        'mercado': [
          'mercado', 'supermercado', 'hipermercado', 'compras', 'mantimentos', 'feira', 'hortifruti', 'atacad√£o', 'extra', 'carrefour', 'p√£o-de-a√ß√∫car', 'walmart', 'assa√≠', 'sam'
        ],
        'contas': [
          'luz', 'energia', 'el√©trica', '√°gua', 'saneamento', 'internet', 'wifi', 'telefone', 'celular', 'g√°s', 'condom√≠nio', 'aluguel', 'iptu', 'financiamento', 'empr√©stimo', 'cart√£o', 'fatura', 'boleto', 'conta'
        ]
      };
      
      for (const [cat, words] of Object.entries(categoryMap)) {
        const found = words.find(word => textToAnalyze.includes(word));
        if (found) {
          categoria = cat;
          console.log(`üéØ CATEGORIA ENCONTRADA: ${categoria} (palavra: ${found}) em texto: "${textToAnalyze}"`);
          break;
        }
      }
      
      // SE CONECTOU VALOR + CATEGORIA = SUCESSO!
      if (valor > 0 && categoria) {
        console.log(`‚úÖ CONEX√ÉO REALIZADA: R$ ${valor} em ${categoria}`);
        return {
          response: `Show! Conectei as informa√ß√µes! R$ ${valor.toFixed(2)} em ${categoria}! üí∞ T√° certo?`,
          extraction: {
            valor: valor,
            categoria: categoria,
            descricao: `Gasto em ${categoria}`,
            data: new Date().toISOString().split('T')[0],
            isValid: false // Aguarda confirma√ß√£o
          }
        };
      }
      
      try {
        // Clean the response to ensure it's valid JSON
        let cleanedResult = result.trim();
        if (!cleanedResult.startsWith('{')) {
          const jsonMatch = cleanedResult.match(/\{[\s\S]*\}/);
          if (jsonMatch) {
            cleanedResult = jsonMatch[0];
          } else {
            console.log('No JSON found, using direct fallback parsing for:', result);
            // Direct fallback parsing for simple cases like "gastei 20"
            let valor = 0;
            let categoria = 'outros';
            
            const numberMatch = userMessage.match(/\d+(?:[.,]\d+)?/);
            if (numberMatch) {
              valor = parseFloat(numberMatch[0].replace(',', '.'));
            }
            
            return {
              response: valor > 0 ? 
                `Opa, R$ ${valor.toFixed(2)} anotado! Mas em que categoria rolou esse gasto? (alimenta√ß√£o, vestu√°rio, transporte...)` :
                'Opa, n√£o consegui sacar direito... Pode falar tipo "gastei R$ 50 no mercado"? üòÖ',
              extraction: {
                valor: valor,
                categoria: valor > 0 ? '' : categoria,
                descricao: valor > 0 ? 'Gasto a categorizar' : 'Gasto',
                data: new Date().toISOString().split('T')[0],
                isValid: false
              }
            };
          }
        }
        
        const parsed = JSON.parse(cleanedResult);
        
        // Enhanced validation and value extraction with conversation context
        let valor = 0;
        let categoria = '';
        
        // First, try to get from parsed response
        if (parsed.extraction?.valor) {
          valor = parsed.extraction.valor;
        }
        
        if (parsed.extraction?.categoria) {
          categoria = parsed.extraction.categoria;
        }
        
        
        // DETEC√á√ÉO DE CONFIRMA√á√ÉO: Verificar se usu√°rio est√° confirmando um gasto anterior
        const currentMessage = userMessage.toLowerCase();
        const confirmationWords = ['sim', 'ta sim', 't√° sim', 'certo', 'isso mesmo', 'exato', 'correto', 'confirmo', 'pode ser', 't√° certo', '√© isso', 'isso a√≠', 'ta certo'];
        const isConfirmation = confirmationWords.some(word => currentMessage.includes(word.toLowerCase()));
        
        if (isConfirmation) {
          // Buscar o √∫ltimo gasto sugerido pelo bot na conversa
          const botMessages = conversationHistory.filter(msg => msg.type === 'assistant');
          const lastBotMessage = botMessages[botMessages.length - 1];
          
          if (lastBotMessage && lastBotMessage.content.includes('T√° certo?')) {
            // Extrair valor e categoria da mensagem do bot
            const valorMatch = lastBotMessage.content.match(/R\$\s*(\d+(?:[.,]\d+)?)/);
            const categoriaMatch = lastBotMessage.content.match(/em\s+(\w+)/i);
            
            if (valorMatch && categoriaMatch) {
              valor = parseFloat(valorMatch[1].replace(',', '.'));
              categoria = categoriaMatch[1].toLowerCase();
              
              // Mapear categorias detectadas no texto para categorias padronizadas
              if (['hamburg', 'hamb√∫rguer', 'burger', 'churros', 'comida'].includes(categoria)) {
                categoria = 'alimenta√ß√£o';
              }
              
              return {
                response: `Show demais! R$ ${valor.toFixed(2)} em ${categoria} registrado! üéâ Gasto salvo com sucesso!`,
                extraction: {
                  valor: valor,
                  categoria: categoria,
                  descricao: `Gasto em ${categoria}`,
                  data: new Date().toISOString().split('T')[0],
                  isValid: true // CONFIRMA E REGISTRA
                },
                personalityUpdate: parsed.personalityUpdate || ''
              };
            }
          }
        }
        
        // SUPER INTELIG√äNCIA CONTEXTUAL: Analise at√© 10 mensagens para conex√£o completa
        const recentMessages = conversationHistory.slice(-10); // √öltimas 10 mensagens para contexto m√°ximo
        const allUserMessages = recentMessages.filter(msg => msg.type === 'user').map(msg => msg.content).join(' ').toLowerCase();
        const fullConversationText = allUserMessages + ' ' + currentMessage;
        
        // SISTEMA DE MEM√ìRIA TEMPOR√ÅRIA: Buscar valor em TODAS as mensagens se n√£o encontrado
        if (!valor) {
          // Primeiro tenta a mensagem atual
          const numberMatch = userMessage.match(/\d+(?:[.,]\d+)?/);
          if (numberMatch) {
            valor = parseFloat(numberMatch[0].replace(',', '.'));
            console.log(`üí∞ VALOR ENCONTRADO na mensagem atual: R$ ${valor}`);
          } else {
            // BUSCA SUPER INTELIGENTE: Procurar qualquer valor nas mensagens do usu√°rio
            const allUserMessages = conversationHistory.filter(msg => msg.type === 'user');
            console.log(`üîç Procurando valor em ${allUserMessages.length} mensagens do usu√°rio...`);
            
            for (const msg of allUserMessages.reverse()) {
              const patterns = [
                /(?:gastei|paguei|custou|foi|comprei|gasto|valor|)\s*(?:r\$|rs|reais|)\s*(\d+(?:[.,]\d+)?)/i,
                /(\d+(?:[.,]\d+)?)\s*(?:r\$|rs|reais|)/i,
                /(\d+(?:[.,]\d+)?)/
              ];
              
              for (const pattern of patterns) {
                const valueMatch = msg.content.match(pattern);
                if (valueMatch) {
                  valor = parseFloat(valueMatch[1].replace(',', '.'));
                  console.log(`üß† SUPER CONEX√ÉO: Valor R$ ${valor} da mensagem: "${msg.content}"`);
                  break;
                }
              }
              if (valor > 0) break;
            }
          }
        }
        
        // Enhanced category detection with conversation context
        if (!categoria) {
          const fullContext = fullConversationText;
          console.log(`üè∑Ô∏è Procurando categoria em: "${fullContext}"`);
          
          const categoryMappings = {
            'vestu√°rio': ['camisa', 'cal√ßa', 'sapato', 't√™nis', 'roupa', 'roupas', 'blusa', 'vestido', 'shorts', 'moda', 'camiseta', 'polo', 'social', 'jaqueta', 'casaco', 'shopping', 'loja', 'lojas', 'magazine', 'boutique', 'renner', 'c&a', 'zara', 'riachuelo', 'marisa', 'hering', 'bolsa', 'bolsas', 'carteira', 'sapatos', 'sneaker', 'chinelo', 'sand√°lia', 'sandalia', 'bon√©', 'bone', 'chap√©u', '√≥culos', 'oculos', 'rel√≥gio', 'relogio', 'cinto', 'bermuda', 'jeans', 'all star', 'havaianas', 'bota', 'cueca', 'calcinha', 'meia', 'meias'],
            'alimenta√ß√£o': ['picanha', 'carne', 'comida', 'almo√ßo', 'jantar', 'lanche', 'restaurante', 'pizza', 'hamb√∫rguer', 'hamburg', 'hamb', 'burger', 'burguer', 'habburg', 'churros', 'churro', 'caf√©', 'bar', 'bebida', 'delivery', 'ifood', 'a√ßougue', 'padaria', 'feira', 'sandu√≠che', 'sanduiche', 'food', 'mcdonalds', 'bk', 'subway', 'fastfood'],
            'tecnologia': ['computador', 'notebook', 'celular', 'smartphone', 'tablet', 'mouse', 'teclado', 'monitor', 'tv', 'televis√£o', 'playstation', 'xbox', 'nintendo', 'fone', 'headset', 'carregador', 'cabo', 'eletr√¥nicos', 'eletronicos', 'pc', 'mac', 'iphone', 'samsung', 'motorola', 'lg'],
            'mercado': ['mercado', 'supermercado', 'compras', 'mantimentos'],
            'transporte': ['uber', 'taxi', 'gasolina', 'posto', 'combust√≠vel', '√¥nibus', 'metr√¥', 'passagem'],
            'lazer': ['cinema', 'festa', 'show', 'teatro', 'jogo', 'parque', 'balada', 'rol√™', 'divers√£o'],
            'sa√∫de': ['rem√©dio', 'm√©dico', 'farm√°cia', 'hospital', 'dentista'],
            'casa': ['m√≥vel', 'sof√°', 'mesa', 'decora√ß√£o', 'casa', 'limpeza'],
            'contas': ['luz', '√°gua', 'internet', 'telefone', 'energia', 'conta']
          };
          
          for (const [cat, terms] of Object.entries(categoryMappings)) {
            const foundTerm = terms.find(term => fullContext.includes(term));
            if (foundTerm) {
              categoria = cat;
              console.log(`üéØ CATEGORIA ENCONTRADA: ${categoria} (palavra: ${foundTerm})`);
              break;
            }
          }
        }
        
        // Smart number words recognition if value still not found
        if (!valor) {
          const numberWords: {[key: string]: number} = {
            'dez': 10, 'vinte': 20, 'trinta': 30, 'quarenta': 40, 'cinquenta': 50,
            'sessenta': 60, 'setenta': 70, 'oitenta': 80, 'noventa': 90, 'cem': 100,
            'duzentos': 200, 'trezentos': 300, 'quatrocentos': 400, 'quinhentos': 500,
            'seiscentos': 600, 'setecentos': 700, 'oitocentos': 800, 'novecentos': 900, 'mil': 1000
          };
          
          for (const [word, num] of Object.entries(numberWords)) {
            if (fullConversationText.includes(word)) {
              valor = num;
              break;
            }
          }
        }
        
        // Enhanced category detection with conversation context
        if (!categoria) {
          const fullContext = fullConversationText;
          
          const categoryMappings = {
            'vestu√°rio': ['camisa', 'cal√ßa', 'sapato', 't√™nis', 'roupa', 'roupas', 'blusa', 'vestido', 'shorts', 'moda', 'camiseta', 'polo', 'social', 'jaqueta', 'casaco', 'shopping', 'loja', 'lojas', 'magazine', 'boutique', 'renner', 'c&a', 'zara', 'riachuelo', 'marisa', 'hering', 'bolsa', 'bolsas', 'carteira', 'sapatos', 'sneaker', 'chinelo', 'sand√°lia', 'sandalia', 'bon√©', 'bone', 'chap√©u', '√≥culos', 'oculos', 'rel√≥gio', 'relogio', 'cinto', 'bermuda', 'jeans', 'all star', 'havaianas', 'bota', 'cueca', 'calcinha', 'meia', 'meias'],
            'alimenta√ß√£o': ['picanha', 'carne', 'comida', 'almo√ßo', 'jantar', 'lanche', 'restaurante', 'pizza', 'hamb√∫rguer', 'hamburg', 'hamb', 'burger', 'burguer', 'habburg', 'churros', 'churro', 'caf√©', 'bar', 'bebida', 'delivery', 'ifood', 'a√ßougue', 'padaria', 'feira', 'sandu√≠che', 'sanduiche', 'food', 'mcdonalds', 'bk', 'subway', 'fastfood'],
            'tecnologia': ['computador', 'notebook', 'celular', 'smartphone', 'tablet', 'mouse', 'teclado', 'monitor', 'tv', 'televis√£o', 'playstation', 'xbox', 'nintendo', 'fone', 'headset', 'carregador', 'cabo', 'eletr√¥nicos', 'eletronicos', 'pc', 'mac', 'iphone', 'samsung', 'motorola', 'lg'],
            'mercado': ['mercado', 'supermercado', 'compras', 'mantimentos'],
            'transporte': ['uber', 'taxi', 'gasolina', 'posto', 'combust√≠vel', '√¥nibus', 'metr√¥', 'passagem'],
            'lazer': ['cinema', 'festa', 'show', 'teatro', 'jogo', 'parque', 'balada', 'rol√™', 'divers√£o'],
            'sa√∫de': ['rem√©dio', 'm√©dico', 'farm√°cia', 'hospital', 'dentista'],
            'casa': ['m√≥vel', 'sof√°', 'mesa', 'decora√ß√£o', 'casa', 'limpeza'],
            'contas': ['luz', '√°gua', 'internet', 'telefone', 'energia', 'conta']
          };
          
          for (const [cat, terms] of Object.entries(categoryMappings)) {
            if (terms.some(term => fullContext.includes(term))) {
              categoria = cat;
              break;
            }
          }
        }
        
        const isValid = valor > 0 && categoria && categoria.trim() !== '';
        
        let response = parsed.response || '';
        
        // INTELIG√äNCIA APRIMORADA: Se tem valor E categoria, confirma e registra!
        if (isValid && !response.includes('registr')) {
          const celebrations = ["Show demais!", "Massa!", "Fechou!", "Top!", "Mandou bem!", "Dahora!", "Perfeito!"];
          const randomCelebration = celebrations[Math.floor(Math.random() * celebrations.length)];
          const categoryEmojis: {[key: string]: string} = {
            'vestu√°rio': 'üëï',
            'alimenta√ß√£o': 'üçΩÔ∏è',
            'tecnologia': 'üíª',
            'transporte': 'üöó',
            'mercado': 'üõí',
            'lazer': 'üéâ',
            'sa√∫de': 'üè•',
            'casa': 'üè†',
            'contas': 'üí°'
          };
          const emoji = categoryEmojis[categoria] || 'üí∞';
          response = `${randomCelebration} Conectei as informa√ß√µes! R$ ${valor.toFixed(2)} em ${categoria}! ${emoji} T√° certo?`;
        }
        
        // Fallback responses for incomplete data
        if (!response || response.length < 10) {
          if (isValid) {
            const celebrations = ["Show demais!", "Massa!", "Fechou!", "Top!", "Mandou bem!", "Dahora!", "Perfeito!"];
            const randomCelebration = celebrations[Math.floor(Math.random() * celebrations.length)];
            const categoryEmojis: {[key: string]: string} = {
              'vestu√°rio': 'üëï',
              'alimenta√ß√£o': 'üçΩÔ∏è',
              'transporte': 'üöó',
              'mercado': 'üõí',
              'lazer': 'üéâ',
              'sa√∫de': 'üè•',
              'casa': 'üè†',
              'contas': 'üí°'
            };
            const emoji = categoryEmojis[categoria] || 'üí∞';
            response = `${randomCelebration} Registrei aqui: R$ ${valor.toFixed(2)} em ${categoria}! ${emoji}`;
          } else if (valor > 0 && !categoria) {
            response = `Opa, R$ ${valor.toFixed(2)} anotado! Mas em que categoria rolou esse gasto? (alimenta√ß√£o, vestu√°rio, transporte...)`;
          } else if (!valor && categoria) {
            response = `Beleza, vi que foi em ${categoria}! Mas quanto custou essa parada?`;
          } else {
            response = 'Opa, n√£o consegui sacar direito... Pode falar tipo "gastei R$ 50 no mercado"? üòÖ';
          }
        }
        
        return {
          response: response,
          extraction: {
            valor: valor,
            categoria: categoria,
            descricao: parsed.extraction?.descricao || (categoria ? `Gasto em ${categoria}` : 'Gasto'),
            data: parsed.extraction?.data || new Date().toISOString().split('T')[0],
            isValid: isValid
          },
          personalityUpdate: parsed.personalityUpdate || ''
        };
      } catch (parseError) {
        console.error('Error parsing OpenAI response:', parseError);
        console.log('Raw response that failed to parse:', result);
        
        // Enhanced fallback with conversation context
        let valor = 0;
        let categoria = '';
        
        const fullHistory = conversationHistory.map(msg => msg.content).join(' ').toLowerCase();
        const fullText = fullHistory + ' ' + userMessage.toLowerCase();
        
        // Extract number from full context
        const numberMatch = fullText.match(/(?:gastei|paguei|custou|foi)\s+(\d+(?:[.,]\d+)?)/);
        if (numberMatch) {
          valor = parseFloat(numberMatch[1].replace(',', '.'));
        } else {
          const simpleMatch = userMessage.match(/\d+(?:[.,]\d+)?/);
          if (simpleMatch) {
            valor = parseFloat(simpleMatch[0].replace(',', '.'));
          }
        }
        
        // Simple category detection from full context
        if (['camisa', 'cal√ßa', 'roupa', 'sapato', 't√™nis', 'blusa', 'vestido'].some(term => fullText.includes(term))) {
          categoria = 'vestu√°rio';
        } else if (['picanha', 'carne', 'comida', 'almo√ßo', 'jantar', 'mercado', 'hamb√∫rguer', 'hamburg', 'pizza', 'lanche'].some(term => fullText.includes(term))) {
          categoria = 'alimenta√ß√£o';
        } else if (['uber', 'taxi', 'gasolina', 'posto'].some(term => fullText.includes(term))) {
          categoria = 'transporte';
        }
        
        const isValid = valor > 0 && categoria !== '';
        
        return {
          response: isValid ? 
            `Show! Conectei as informa√ß√µes e registrei R$ ${valor.toFixed(2)} em ${categoria}! Mandou bem! üí∞` : 
            'Opa, n√£o consegui sacar direito... Pode repetir tipo "gastei R$ 50 em comida"? üòÖ',
          extraction: {
            valor: valor,
            categoria: categoria,
            descricao: categoria ? `Gasto em ${categoria}` : 'Gasto',
            data: new Date().toISOString().split('T')[0],
            isValid: isValid
          }
        };
      }
    } catch (error) {
      console.error('Error extracting expense data:', error);
      throw error;
    }
  }
}
